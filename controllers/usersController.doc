This file is a huge explanation about "usersController.js"

1-) AsyncHandler & Bcrypt

express-async-handler: This library is imported to facilitate the handling of asynchronous operations in Express.js middleware. 
When dealing with asynchronous code in Express middleware, it's essential to handle errors properly. 
The express-async-handler library simplifies this process by automatically catching errors and passing them to the Express error-handling mechanism.

bcrypt: The bcrypt library is imported for password hashing. Hashing passwords is a fundamental security practice to protect user credentials. 
bcrypt provides a secure way to hash passwords, making it suitable for use in authentication systems. It includes methods for hashing and comparing passwords, 
enhancing the overall security of user authentication processes.


// 1. Import the 'express-async-handler' library
const asyncHandler = require('express-async-handler');

// The 'express-async-handler' library is used to handle asynchronous operations in Express.js middleware.
// It automatically catches errors that occur during asynchronous operations, making error handling more convenient.

// 2. Import the 'bcrypt' library
const bcrypt = require('bcrypt');

// The 'bcrypt' library is commonly used for hashing passwords in a secure manner.
// It provides methods for hashing and comparing passwords, which is crucial for user authentication and security.

2-) GET All User

asynchandler: The asynchandler middleware is assumed to be defined elsewhere in the code. 
It is used to handle asynchronous functions and automatically catch any errors that might occur during their execution.

Fetching Users: The User model (presumably a Mongoose model) is used to query the database and retrieve all users. 
The select('-password') method excludes the password field from the retrieved data, enhancing security.

Check for Users: It checks if any users are found in the database.

Error Handling: If no users are found, a JSON response with a 400 status code and a message stating 
"No Users Found" is returned. This is useful for informing the client that the requested resource is not available.

Success Response: If users are found, a JSON response containing the user data is sent. 
The response includes the retrieved user data without the password field.


// 1. Import the 'asynchandler' middleware (assuming it's defined somewhere else in the code)
const getAllUsers = asynchandler(async (req, res) => {
  // 2. Use the 'User' model to fetch all users from the database
  const users = await User.find().select('-password').lean();

  // 3. Check if there are no users found
  if (!users) {
    // 4. If no users are found, return a JSON response with a 400 status code and a message
    return res.status(400).json({ message: 'No Users Found' });
  }

  // 5. If users are found, send a JSON response containing the user data
  res.json(users);
});

3-) Create a new User

Import Statements: The code imports the asynchandler middleware for handling asynchronous functions and the bcrypt library for password hashing.

Destructuring Request Body: The code destructures username, password, and roles from the request body.

Data Validation: It checks if all the required fields are present and valid. If any field is missing or the roles field is not an array or is empty, 
a 400 status response is sent with a corresponding message.

Duplicate Username Check: It checks if a user with the same username already exists in the database. 
If a duplicate is found, a 400 status response is sent with a "Duplicate username" message.

Password Hashing: The password is hashed using the bcrypt library with 10 rounds of salt.

Create User Object: A user object is created with the username, hashed password, and roles.

Create and Store User: The user object is created and stored in the database using the User.create method.

Response Handling: If the user creation is successful, a success message and a 201 status code are sent. 
If there's an issue with the data or the user creation process, an error message and a 400 status code are sent.



// 1. Import the 'asynchandler' middleware and 'bcrypt' library
const createNewUser = asynchandler(async (req, res) => {
  // 2. Destructure username, password, and roles from the request body
  const { username, password, roles } = req.body;

  // 3. Confirm data: Check if all required fields are present and valid
  if (!username || !password || !Array.isArray(roles) || !roles.length) {
    return res.status(400).json({ message: 'All fields are required' });
  }

  // 4. Check for duplicate username in the database
  const duplicate = await User.findOne({ username }).lean().exec();
  if (duplicate) {
    return res.status(400).json({ message: 'Duplicate username' });
  }

  // 5. Hash the password using bcrypt with 10 rounds of salt
  const hashedPwd = await bcrypt.hash(password, 10);

  // 6. Create an object containing the username, hashed password, and roles
  const userObject = { username, password: hashedPwd, roles };

  // 7. Create and store the new user in the database
  const user = await User.create(userObject);

  // 8. Check if the user was successfully created
  if (user) {
    // 9. Respond with a success message and a 201 status code (Created)
    res.status(201).json({ message: 'New user created' });
  } else {
    // 10. Respond with an error message and a 400 status code (Bad Request)
    res.status(400).json({ message: 'Invalid user data received' });
  }
});

4-) Update a user

Import Statements: The code imports the asynchandler middleware for handling asynchronous functions and the bcrypt library for password hashing.

Destructuring Request Body: The code destructures id, username, roles, active, and password from the request body.

Data Validation: It checks if all the required fields are present and valid. If any field is missing or the types are incorrect, 
a 400 status response is sent with a corresponding message.

Find User by ID: It queries the database to find the user based on the provided id.

User Existence Check: It checks if the user with the given ID exists. If not, a 400 status response is sent with a "User not found" message.

Duplicate Username Check: It checks for a duplicate username, excluding the current user. If a duplicate is found, a 409 status response is sent with a "Duplicate username" message.

Update User Properties: It updates the user's properties with the provided values.

Update Password: If a new password is provided, it hashes the password using bcrypt with 10 rounds of salt and updates the user's password.

Save Updated User: It saves the updated user in the database.

Response Handling: It responds with a JSON object containing a success message indicating that the user has been updated.



// 1. Import the 'asynchandler' middleware and 'bcrypt' library
const updateUser = asynchandler(async (req, res) => {
  // 2. Destructure id, username, roles, active, and password from the request body
  const { id, username, roles, active, password } = req.body;

  // 3. Validate required fields and types
  if (!id || !username || !Array.isArray(roles) || !roles.length || typeof active !== 'boolean') {
    return res.status(400).json({ message: 'All fields are required' });
  }

  // 4. Find the user by ID in the database
  const user = await User.findById(id).exec();

  // 5. Check if the user exists
  if (!user) {
    return res.status(400).json({ message: 'User not found' });
  }

  // 6. Check for duplicate username (excluding the current user)
  const duplicate = await User.findOne({ username }).lean().exec();
  if (duplicate && duplicate._id.toString() !== id) {
    return res.status(409).json({ message: 'Duplicate username' });
  }

  // 7. Update user properties
  user.username = username;
  user.roles = roles;
  user.active = active;

  // 8. Update password if provided
  if (password) {
    // Hash the new password
    user.password = await bcrypt.hash(password, 10); // salt rounds
  }

  // 9. Save the updated user in the database
  const updatedUser = await user.save();

  // 10. Respond with a success message
  res.json({ message: `${updatedUser.username} updated` });
});

5-) Delete user

Import Statement: The code imports the asynchandler middleware for handling asynchronous functions.

Destructuring Request Body: The code destructures id from the request body.

User ID Check: It checks if the user ID is provided. If not, a 400 status response is sent with a "User ID Required" message.

Check for Assigned Notes: It queries the Note collection in the database to check if the user has assigned notes. 
If notes are found, a 400 status response is sent with a "User has assigned notes" message.

Find User by ID: It queries the database to find the user based on the provided id.

User Existence Check: It checks if the user with the given ID exists. If not, a 400 status response is sent with a "User not found" message.

Delete User: It deletes the user from the database using the deleteOne method.

Create Reply Message: It creates a reply message containing the deleted user's username and ID.

Response Handling: It responds with a JSON object containing the deletion message.

// 1. Import the 'asynchandler' middleware
const deleteUser = asynchandler(async (req, res) => {
  // 2. Destructure id from the request body
  const { id } = req.body;

  // 3. Check if the user ID is provided
  if (!id) {
    return res.status(400).json({ message: 'User ID Required' });
  }

  // 4. Check if the user has assigned notes
  const notes = await Note.findOne({ user: id }).lean().exec();
  if (notes?.length) {
    return res.status(400).json({ message: 'User has assigned notes' });
  }

  // 5. Find the user by ID in the database
  const user = await User.findById(id).exec();

  // 6. Check if the user exists
  if (!user) {
    return res.status(400).json({ message: 'User not found' });
  }

  // 7. Delete the user from the database
  const result = await user.deleteOne();

  // 8. Create a reply message
  const reply = `Username ${result.username} with ID ${result._id} deleted`;

  // 9. Respond with the deletion message
  res.json(reply);
});
